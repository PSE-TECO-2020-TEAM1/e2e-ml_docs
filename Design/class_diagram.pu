@startuml ExpressApp

class App {

}

App ---> "1" WorkspaceController
App ---> "1" LabelController
App ---> "1" SampleController

' ----------- LabelController ----------------

interface CreateLabelReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +labelId: ObjectId
    +name: string
}

interface CreateLabelRes {
    +success: boolean
}

CreateLabelReq -[hidden]-> CreateLabelRes

interface GetLabelsReq {
    +userId: ObjectId
    +workspaceId: ObjectId
}

interface GetLabelsRes {
    +success: boolean
    +labels: Label[]
}

GetLabelsReq -[hidden]-> GetLabelsRes

interface DeleteLabelReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +labelId: ObjectId
}

interface DeleteLabelRes {
    +success: boolean
}

DeleteLabelReq -[hidden]-> DeleteLabelRes

interface RenameLabelReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +labelId: ObjectId
    +name: string
}

interface RenameLabelRes {
    +success: boolean
}

RenameLabelReq -[hidden]-> RenameLabelRes

interface DescribeReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +labelId: ObjectId
    +description: string
}

interface DescribeRes {
    +success: boolean
}

DescribeReq -[hidden]-> DescribeRes

class LabelController {
    +createLabel(req: CreateLabelReq, res: Object) : void
    +getLabels(req: GetLabelsReq, res: Object) : void
    +deleteLabel(rq:DeleteLabelReq, res: Object) : void
    +renameLabel(req: RenameLabelReq, res: Object) : void
    +describe(req: DescribeReq, res: Object) : void
}

LabelController -----> "1" WorkspaceModel

LabelController ...> CreateLabelReq
LabelController ...> CreateLabelRes
note bottom of CreateLabelRes: CreateLabelRes responseBody = {success: true};\nres.json(responseBody);

LabelController ...> GetLabelsReq
LabelController ...> GetLabelsRes

LabelController ...> DeleteLabelReq
LabelController ...> DeleteLabelRes

LabelController ...> RenameLabelReq
LabelController ...> RenameLabelRes

LabelController ...> DescribeReq
LabelController ...> DescribeRes

' ------------- WorkspaceController ----------

interface GetWorkspacesReq {
    +userId: ObjectId
}

interface GetWorkspacesRes {
    +success: boolean
    +workspaces: Workspace[]
}

GetWorkspacesReq -[hidden]-> GetWorkspacesRes

interface CreateWorkspaceReq {
    +userId: ObjectId
    +name: string
    +sensors: Sensor[]
}

interface CreateWorkspaceRes {
    +success: boolean
}

CreateWorkspaceReq -[hidden]-> CreateWorkspaceRes

interface DeleteWorkspaceReq {
    +userId: ObjectId
    +workspaceId: ObjectId
}

interface DeleteWorkspaceRes {
    +success: boolean
}

DeleteWorkspaceReq -[hidden]-> DeleteWorkspaceRes

interface GetSensorsReq {
    +userId: ObjectId
}

interface GetSensorsRes {
    +sensors: SensorType[]
    +success: boolean
}

GetSensorsReq -[hidden]-> GetSensorsRes

class WorkspaceController {
    +getWorkspaces(req: GetWorkspacesReq, res: Object) : void
    +createWorkspace(req: CreateWorkspaceReq, res: Object) : void
    +deleteWorkspace(req: DeleteWorkspaceReq, res: Object) : void
    +getSensors(req: GetSensorsReq, res: Object) : void
}

WorkspaceController ...> GetWorkspacesReq
WorkspaceController ...> GetWorkspacesRes
WorkspaceController ...> CreateWorkspaceReq
WorkspaceController ...> CreateWorkspaceRes
WorkspaceController ...> DeleteWorkspaceReq
WorkspaceController ...> DeleteWorkspaceRes
WorkspaceController ...> GetSensorsReq
WorkspaceController ...> GetSensorsRes

WorkspaceController ---> "1" WorkspaceModel

'------------------ Sensor/Sample -----------------------

enum SensorType {
    ACCELEROMETER(50, {x, y, z}),
    GYROSCOPE(100, {x, y, z}),
    MAGNETOMETER(250, {x, y, z});

    +maxSamplingRate: number
    +data: string[]
}

' Schema
class Sensor {
    +id: ObjectId
    +samplingRate: number
}

Sensor ---> "1" SensorType :type

interface PrimitiveDataPoint {
    +value: number[]
    +timestamp: UnixTimestamp
}

class DataPoint implements PrimitiveDataPoint {
    +id: ObjectId
}

class SensorDataPoints {
    +id: ObjectId
}

SensorDataPoints "1" *--- "*" DataPoint : dataPoints

' Schema
class TimeFrame {
    +id: ObjectId
    +start: UnixTimestamp
    +end: UnixTimestamp
}

' Schema
class Sample {
    +id: ObjectId
    -start: UnixTimestamp
    -end: UnixTimestamp
    +setTimeFrames(timeframes: TimeFrame[])
}

' aggregation or relation?
Sample "1" o--- "*" Timeframe : timeframes

Sample "*" --- "1" Label
Sample "1" *--- "*" SensorDataPoints : sensorDataPoints

' mongoose.Model<Sample>
class SampleModel {
    +find(id: ObjectId) : Sample
}

SampleModel "1" *--- "*" Sample : samples

' Schema
class Label {
    +id: ObjectId
    +name: string
    +description?: string
}

' Schema
class Workspace {
    +id: ObjectId
    +name: String
}

Workspace *--- "*" Label
Workspace *--- "*" Sensor
Workspace o--- "*" Sample

' mongoose.Model<Workspace>
class WorkspaceModel {
    +find(id: ObjectId) : Workspace
}

WorkspaceModel "1" *--- "*" Workspace : workspaces

' --------------- SampleController -------------------

interface AddSampleReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    ' SensorId: ObjectId
    +dataPoints: Map<ObjectId, PrimitiveDataPoint[]>
}

AddSampleReq ...> PrimitiveDataPoint

interface AddSampleRes {
    +success: boolean
}

AddSampleReq -[hidden]-> AddSampleRes

interface GetSamplesReq {
    +userId: ObjectId
    +workspaceId: ObjectId
}

interface GetSamplesRes {
    +success: boolean
}

GetSamplesReq -[hidden]-> GetSamplesRes

interface RenameSampleReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +sampleId: ObjectId
    +name: string
}

interface RenameSampleRes {
    +success: boolean
}

RenameSampleReq -[hidden]-> RenameSampleRes

interface DeleteSampleReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +sampleId: ObjectId
}

interface DeleteSampleRes {
    +success: boolean
}

DeleteSampleReq -[hidden]-> DeleteSampleRes

interface SetTimeFramesReq {
    +userId: ObjectId
    +workspaceId: ObjectId
    +sampleId: ObjectId
    +timeFrames: TimeFrame[]
}

SetTimeFramesReq ...> TimeFrame

interface SetTimeFramesRes {
    +success: boolean
}

class SampleController {
    +addSample(req: AddSampleReq, res: AddSampleRes) : void
    +getSamples(req: GetSamplesReq, res: GetSamplesRes) : void
    +renameSample(req: RenameSampleReq, res: RenameSampleRes) : void
    +deleteSample(req: DeleteSampleReq, res: DeleteSampleReq) : void
    +setTimeFrames(req: SetTimeFramesReq, res: SetTimeFrameRes) : void
    }

    SampleController ...> AddSampleReq
    SampleController ...> AddSampleRes
    SampleController ...> GetSamplesReq
    SampleController ...> GetSamplesRes
    SampleController ...> RenameSampleReq
    SampleController ...> RenameSampleRes
    SampleController ...> DeleteSampleReq
    SampleController ...> DeleteSampleRes
    SampleController ...> SetTimeFramesReq
    SampleController ...> SetTimeFramesRes

    SampleController ---> SampleModel

    @enduml