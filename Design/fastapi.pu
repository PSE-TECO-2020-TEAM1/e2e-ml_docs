@startuml Model Management Class Diagram

class App {}

App ---> "1" Router

class WorkspaceModel {
    +find(id: ObjectId): Workspace
}

class Workspace {
    +id: ObjectId
    +name: string
    +user: string
}

Workspace "*" *--- WorkspaceModel
Workspace ---> "1" MLModelModel : mlModelModel

class getParametersRes {
}

getParametersRes ---> "5" Imputation: imputations
getParametersRes ---> "11" Feature: features
getParametersRes ---> "5" Normalizer: normalizers
getParametersRes ---> "4" Classifier: classifiers

class trainReq {
    model_name: string
}

class getModelRes {
    
}

class getPredictionConfigRes {

}

class submitDataWindowReq {

}

class Router {
    -trainers: Map<ObjectId, Trainer> 
    -predictors: Map<ObjectId, IClassifier>

    +getParameters(workspaceId: ObjectId): getParametersRes
    +getModels(workspaceId: ObjectId): [(ObjectId, string)]
    +train(workspaceId: ObjectId, req: trainReq): void
    +trainingProgress(workspaceId: ObjectId): number
    +getModel(workspaceId: ObjectId, modelId: ObjectId) : getModelRes
    +getPredictionId(workspaceId: ObjectId, modelId: ObjectId): string
    +getPredictionConfig(predictionId: string): getPredictionConfigRes
    +submitDataWindow(predictionId: string, req: submitDataWindowReq): void
    -getDataset(workspaceId: ObjectId): Sample[]
}

Router ...> getParametersRes
Router ...> trainReq
Router ...> getModelRes
Router ...> getPredictionConfigRes
Router ...> submitDataWindowReq


class Sample {

}

class Factory <<static>> {
    +{static} getImputation(imputation: Imputation): IImputer
    +{static} getNormalizer(normalizer: Normalizer): INormalizer
    +{static} getClassifier(classifier: Classifier, hyperparameters: Object): IClassifier
}

Factory ...> Imputation
Factory ...> IImputer
Factory ...> Normalizer
Factory ...> INormalizer
Factory ...> Classifier
Factory ...> IClassifier

interface IImputer {
    +fit(df: DataFrame): void
    +transform(): DataFrame
}

interface INormalizer {
    +fit(df: DataFrame): void
    +transform(): DataFrame
}

interface IClassifier {
    +fit(df: DataFrame): void
    +predict(): ndarray
}

class Trainer {
    +progress: float
    -dataset: DataFrame
    -windowSize: integer
    -slidingStep: integer
    +<<create>>Trainer(dataset: Sample[], imputation: Imputation, features: Feature[], normalizer: Normalizer, classifier: Classifier, hyperparameters: Object)
    +train(): (IClassifier, PerformanceMetrics)
    -splitToWindows(dataSet: Sample[]): DataFrame
    -extractFeature(): DataFrame
}

Trainer ---> "1" IImputer : imputer
Trainer ---> "1" INormalizer : normalizer
Trainer ---> "1" IClassifier : classifier

Trainer ...> Imputation
Trainer ...> Feature
Trainer ...> Normalizer
Trainer ...> Classifier
Trainer ...> IClassifier
Trainer ...> PerformanceMetrics

class PerformanceMetrics {
    +labels: Map<string, List[(string, integer)]>
}

class MLModel {
    +id: ObjectId
    +name: string
}

MLModel ---> "1" Imputation : imputation
MLModel ---> "1..*" Feature : features
MLModel ---> "1" Normalizer : normalizer
MLModel ---> "1" Classifier : classifier
MLModel ---> "1" PerformanceMetrics : performance_metrics
MLModel ---> "1" IClassifier : classifier_object

class MLModelModel {
    +find(id: ObjectId): MLModel
}

MLModel "*" *--- MLModelModel

enum Imputation {
    +MEAN_IMPUTATION
    +LAST_OBSERVATION_CARRIED_FORWARD_IMPUTATION
    +LINEAR_INTERPOLATION
    +SPLINE_INTERPOLATION
    +MOVING_AVERAGE_IMPUTATION
}

enum Feature {
    +MIN
    +MAX
    +VARIANCE
    +ENERGY
    +AUTOREGRESSIVE_CORRELATION
    +MEAN
    +IQR
    +PEARSON_CORRELATION
    +SKEWNESS
    +KURTOSIS
    +FOURIER_TRANSFORM
}

enum Normalizer {
    +MIN_MAX_SCALER
    +NORMALIZER
    +QUANTILE_TRANSFORMER
    +ROBUST_SCALER
    +STANDARD_SCALER
} 

enum Classifier {
    +MLP_CLASSIFIER
    +SV_CLASSIFIER
    +RANDOM_FOREST_CLASSIFIER
    +KNEIGHBOR_CLASSIFIER
}

@enduml