@startuml Workspace Management Class Diagram

skinparam titleFontSize 100
skinparam titleFontColor grey
skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBackgroundColor Turquoise


class App{

}

App ---> "1" WorkspaceController
App ---> "1" LabelController
App ---> "1" SampleController

' ----------- LabelController ----------------

interface CreateLabelReq {
    +workspaceId: ObjectId
    +labelName: string
}

interface GetLabelsReq {
    +workspaceId: ObjectId
}

interface GetLabelsRes {
    +labels: Label[]
}

GetLabelsReq -[hidden]-> GetLabelsRes

interface DeleteLabelReq {
    +workspaceId: ObjectId
    +labelId: ObjectId
}

interface RenameLabelReq {
    +workspaceId: ObjectId
    +labelId: ObjectId
    +labelName: string
}

interface DescribeLabelReq {
    +workspaceId: ObjectId
    +labelId: ObjectId
    +description: string
}

class LabelController {
    +createLabel(req: CreateLabelReq, res: Object) : void
    +getLabels(req: GetLabelsReq, res: Object) : void
    +deleteLabel(req: DeleteLabelReq, res: Object) : void
    +renameLabel(req: RenameLabelReq, res: Object) : void
    +describeLabel(req: DescribeLabelReq, res: Object) : void
}

LabelController -----> "1" WorkspaceModel
LabelController -----> "1" SampleModel

LabelController ...> CreateLabelReq

LabelController ...> GetLabelsReq
LabelController ...> GetLabelsRes

LabelController ...> DeleteLabelReq

LabelController ...> RenameLabelReq

LabelController ...> DescribeLabelReq

' ------------- WorkspaceController ----------

interface GetWorkspacesRes {
    +workspaces: {ObjectId, string}[]
}
note top: {workspaceID, name}

interface CreateWorkspaceReq {
    +name: string
    +sensors: {"Accelerometer" | "Gyroscope" | "Magnetometer", integer}[]
}
note top: {sensorName, samplingRate}

interface CreateWorkspaceRes {
    +workspaceId: ObjectId
}

CreateWorkspaceReq -[hidden]-> CreateWorkspaceRes

interface DeleteWorkspaceReq {
    +workspaceId: ObjectId
}

interface GetSensorsRes {
    +sensors: {string, integer, integer}[]
}
note top : {name, maxSamplingRate, defaultSamplingRate}

GetSensorsReq -[hidden]-> GetSensorsRes

interface GetWorkspaceSensorsReq {
    +workspaceId: ObjectId
}

interface GetWorkspaceSensorsRes {
    +{ObjectId, string, string[], integer}[]
}
note top : {id, name, dataFormat, samplingRate}

GetWorkspaceSensorsReq -[hidden]-> GetWorkspaceSensorsRes

interface GetSubmissionIdReq {
    +workspaceId: ObjectId
}

interface GetSubmissionIdRes {
    +submissionId: string
}

GetSubmissionIdReq -[hidden]-> GetSubmissionIdRes

interface GetSubmissionConfigReq {
    +submissionId: string
}

interface GetSubmissionConfigRes {
    +sensors: {string, integer}[]
    +labels: {string, string}
}
note top: sensors: {name, samplingRate}, labels: {name, description}

GetSubmissionConfigReq -[hidden]-> GetSubmissionConfigRes

class WorkspaceController {
    +getWorkspaces(req: Object, res: Object) : void
    +createWorkspace(req: CreateWorkspaceReq, res: Object) : void
    +renameWorkspace(req: RenameWorkspaceReq, res: Object) : void
    +deleteWorkspace(req: DeleteWorkspaceReq, res: Object) : void
    +getSensors(req: GetSensorsReq, res: Object) : void
    +getWorkspaceSensors(req: GetWorkspaceSensorsReq, res: Object): void
    +getSubmissionId(req: GetSubmissionIdReq, res: Object) : void
    +getSubmissionConfig(req: GetSubmissionConfigReq, res: Object): void
    -generateSubmissionId(): string
}

WorkspaceController ...> SensorType
WorkspaceController ...> GetWorkspacesRes
WorkspaceController ...> CreateWorkspaceReq
WorkspaceController ...> CreateWorkspaceRes
WorkspaceController ...> DeleteWorkspaceReq
WorkspaceController ...> GetSensorsReq
WorkspaceController ...> GetSensorsRes
WorkspaceController ...> GetWorkspaceSensorsReq
WorkspaceController ...> GetWorkspaceSensorsRes
WorkspaceController ...> GetSubmissionIdReq
WorkspaceController ...> GetSubmissionIdRes
WorkspaceController ...> GetSubmissionConfigReq
WorkspaceController ...> GetSubmissionConfigRes

WorkspaceController -----> "1" WorkspaceModel
WorkspaceController -----> "1" SampleModel

'------------------ Sensor/Sample -----------------------

enum SensorType {
    ACCELEROMETER(50, 25, {x, y, z}),
    GYROSCOPE(100, 70, {x, y, z}),
    MAGNETOMETER(250, 250, {x, y, z});

    +maxSamplingRate: number
    +defaultSamplingRate: number
    +dataFormat: string[]
}

' Schema
class Sensor {
    +id: ObjectId
    +samplingRate: number
}

Sensor ---> "1" SensorType :type

class DataPoint {
    +value: number[]
    +timestamp: UnixTimestamp
    +id: ObjectId
}

class SensorDataPoints {
    +id: ObjectId
    +sensor_id: ObjectId
}

SensorDataPoints "1" *--- "*" DataPoint : dataPoints

' Schema
class TimeFrame {
    +start: UnixTimestamp
    +end: UnixTimestamp
}

' Schema
class Sample {
    +id: ObjectId
    -start: UnixTimestamp
    -end: UnixTimestamp
    +setTimeFrames(timeframes: TimeFrame[])
}

' aggregation or relation?
Sample "1" o--- "*" TimeFrame : timeframes

Sample "*" --- "1" Label
Sample "1" *--- "*" SensorDataPoints : allSensorDataPoints

' mongoose.Model<Sample>
class SampleModel {
    +find(id: ObjectId) : Sample
}

SampleModel "1" *--- "*" Sample : samples

' Schema
class Label {
    +id: ObjectId
    +name: string
    +description?: string
}

' Schema
class Workspace {
    +id: ObjectId
    +name: string
    +user: string
    +submissionIds: string[]
}

Workspace *--- "*" Label
Workspace *--- "*" Sensor
Workspace o--- "*" Sample

' mongoose.Model<Workspace>
class WorkspaceModel {
    +find(id: ObjectId) : Workspace
}

WorkspaceModel "1" *--- "*" Workspace : workspaces

' --------------- SampleController -------------------

interface SubmitSampleReq {
    +samples: Sample[]
    +submissionId: string
}

SubmitSampleReq -[hidden]-> SubmitSampleRes

interface GetSamplesReq {
    +workspaceId: ObjectId
    +onlyIds: boolean
}

interface GetSamplesRes {
    +samples: Sample[]
}

GetSamplesReq -[hidden]-> GetSamplesRes

interface RelabelSampleReq {
    +workspaceId: ObjectId
    +sampleId: ObjectId
    +labelId: LabelId
}

interface DeleteSampleReq {
    +workspaceId: ObjectId
    +sampleId: ObjectId
}

interface SetTimeFramesReq {
    +workspaceId: ObjectId
    +sampleId: ObjectId
    +timeframes: TimeFrame[]
}

SetTimeFramesReq ...> TimeFrame

interface GetSampleDataPointsReq {
    +workspaceId: ObjectId
    +sampleId: ObjectId
}

interface GetSampleDataPointsRes {
    +sample: Sample
}

GetSampleDataPointsReq -[hidden]-> GetSampleDataPointsRes

class SampleController {
    +submitSample(req: SubmitSampleReq, res: Object) : void
    +getSamples(req: GetSamplesReq, res: Object) : void
    +getSampleDataPoints(req: GetSampleDataPointsReq, res: Object) : void
    +relabelSample(req: RelabelSampleReq, res: Object) : void
    +deleteSample(req: DeleteSampleReq, res: Object) : void
    +setTimeFrames(req: SetTimeFramesReq, res: Object) : void
}

    SampleController ...> SubmitSampleReq
    SampleController ...> GetSamplesReq
    SampleController ...> GetSamplesRes
    SampleController ...> RelabelSampleReq
    SampleController ...> DeleteSampleReq
    SampleController ...> SetTimeFramesReq
    SampleController ...> GetSampleDataPointsReq
    SampleController ...> GetSampleDataPointsRes

    SampleController -----> SampleModel
    SampleController -----> WorkspaceModel

    @enduml