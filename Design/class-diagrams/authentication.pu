@startuml Authentication Class Diagram

class App {
    -SERVER_SECRET: string
}

class TokenContent {
    +username: string
    +expiration: number
}

class AuthenticationController {
    +signUp(req: SignUpReq, res: Object) : void
    +validateEmail(req: ValidateEmailReq, res: Object): void
    +login(req: LoginReq, res: Object) : void
    -signToken(content: TokenContent, secret: string) : string
    +refresh(req: RefreshReq, res: Object) : void
    -extractToken(token: string, secret: string) : TokenContent
    -generateRefreshToken(): string
}

AuthenticationController --> TokenContent
AuthenticationController --> EmailValidator

interface SignUpReq {
    +email: string
    +username: string
    +passwordHash: string
}

interface ValidateEmailReq {
    +token: string
}

interface LoginReq {
    +username: string
    +passwordHash: string
}
interface LoginRes {
    +access_token: string
    +refresh_token: string
}
LoginReq -[hidden]-> LoginRes

interface RefreshReq {
    +refresh_token: string
}
interface RefreshRes {
    +new_access_token: string
}
RefreshReq -[hidden]-> RefreshRes

AuthenticationController ..> SignUpReq
AuthenticationController ..> LoginReq
AuthenticationController ..> LoginRes
AuthenticationController ..> RefreshReq
AuthenticationController ..> RefreshRes
AuthenticationController ..> ValidateEmailReq

App --> AuthenticationController

class UserModel {
    +findOne(username: string) : User
}

AuthenticationController --> UserModel

class User {
    +id: ObjectId
    +email: string
    +validatedEmail: boolean
    +username: string
    +passwordHash: string
    +authToken: string
    +refreshToken: string
    +isValidPassword() : boolean
}

class EmailValidator {
    +userToToken: Map<ObjectId, string>
    +{static} sendTokenToEmail(user: ObjectId, email: string): void
    +{static} checkToken(user: ObjectId, token: string): boolean
    -generateValidationToken(): string
}

UserModel *-- User : users

@enduml